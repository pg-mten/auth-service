// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth"]
}

model Role {
  id         Int       @unique @default(autoincrement())
  name       String    @db.VarChar()
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime? @db.Timestamp()

  Permission Permission[]
  User       User[]

  @@map("roles")
  @@schema("auth")
}

model Permission {
  id         Int     @unique @default(autoincrement())
  role       Role?    @relation(fields: [role_id], references: [id])
  role_id    Int?     @db.Integer()
  action     String  @db.VarChar()
  subject    String  @db.VarChar()
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text()

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime? @db.Timestamp()

  @@map("permissions")
  @@schema("auth")
}

model User {
  id       Int    @unique @default(autoincrement())
  username String @unique
  email    String @unique @db.VarChar(255)
  password String

  role    Role @relation(fields: [role_id], references: [id])
  role_id Int  @db.Integer()

  Article Article[] @relation(name: "created_user")

  @@map("users")
  @@schema("auth")
}

model Article {
  id   Int    @unique @default(autoincrement())
  name String @db.VarChar()

  created_user User @relation(name: "created_user", fields: [created_by], references: [id])
  created_by   Int  @db.Integer()

  @@map("articles")
  @@schema("auth")
}
